Создание объекта(коллекция различных значений):
let userInfo = new Object(); // конструктор объекта
let userinfo = {}; // литерал объекта (используется чаще)
Пример непустого объекта:
let userInfo = {
 name: "Vasilii",
 age: 30,
};
console.log(userInfo); // получение всей коллекции(объекта)
console.log(userInfo.name); //получение конкретного значения

Имя ключа может состоять из двух слов:
let userInfo = {
 "likes JS" : true,  //должно заключаться в ковычки при объявлении и выводе
};
console.log(userInfo["likes JS"]);

Символ описание и зачем нужен:
let id = Symbol("id");
let userInfo ={
...
[id]: "Некое значение",
};
Нужен для : 
1.Скрытия свойства для цикла for...in
2.Использования системных символов : Symbol.Iterator , Symbol.toPrimitive и т.д.

Объекты могут иметь вложенность.

Дублирование объектов:
Object.assign(куда(объект), что(свойство№1), что(свойство№2), ...);
Пример:
let userInfo = {
 name: "Vasilii",
 age: 30,
};

let user = object.assign( {}, userInfo);
Создаст новый объект user, куда будут скопированы свойства объекта userInfo.

Цикл for...in используется для перебора всех свойств объекта.
for( let key in object){ тело цикла для каждого свойства}
Пример:
for (let key in userInfo)
{console.log (key); // ключи : name,age и т.д
console.log (userInfo[key]);} // значение ключей Vasilii , 30 и т.д.

Использование слова this(чтобы не писать каждый раз имя объекта)
console.log(`${userInfo.name},${userInfo.age},${userInfo.adress}, и тд
То же самое
console.log(`${this.name},${this.age},${this.adress}, и тд
!!!Важно понимать что this обращается к первому родительскому объекту
Поэтому объявляя функцию в функции объекта использовать this не выйдет - будет ошибка
Избежать это можно, если использоваться стрелочные функции

Пример:
... /// ранее- ключи и значения объекта
showInfo() {
function show() {
console.log(`${this.name},${this.age},${this.adress}
}
show();
}
} // - закрытие свойств объекта
userInfo.showInfo() ; -- выдаст ошибку

Правильно так:
showInfo() {
let show = () => console.log(`${this.name},${this.age},${this.adress);
}
show();
} // - закрытие свойств объекта
userInfo.showInfo() ; -- выдаст имя, возвраст, адресс

Но this использовать надежнее
Если объявить объект, присвоить ему свойства, затем сделать новую переменную с ссылкой
на этот объект, а предыдущий обнулить(null), то в ссылке на объект тоже всё обнулится(
если не использовать this).

Если нам нужно работать с множеством объектов удобно использовать функции-коструктор
Например для создания новых объектов:
function UserInfo(name){
// this = {}; - Создается пусой объект(неявно)
this.name = name;
this.age = 30;
// return this; - Возвращается объект(неявно)
}
console.log(new UserUnfo('Vasya');
console.log(new UserUnfo('Nadya');

Таким образом создастя два объекта с именем Вася и Надя соответсвенно, обоим по 30 лет.
