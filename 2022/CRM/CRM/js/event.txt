Типы событий мыши.
Простые часто используемый события:
mousedown/mouseup - кнопка нажата/отпущена над элементом 
mouseover/mouseout - курсор мыши поялвяется над элементом и уходит с него
mousemove - каждое движение мыши над элементом генерирует это собтые
contextmenu - вызывается при попытке открытия контекстного меню( как правило, нажатием правой кнопки мыши. Но, это не совсем событие мыши, оно может вызываться и 
специальной кнопкой клавиатуры.
Комплексные события:
click - вызывается при mousedown, а затем mouseup над одним и тем же элементом, если использовалась основная кнопка мыши.
dbclick - вызывается двойным кликом на элементе.

Поподробнее о mousemove.
const blockForMouse = document.querySelector('.block-for-mouse'); // добавляем на страницу блок для тестирование на котором будут выводится координаты мыши относительно--
blockForMouse.addEvenrListener("mousemove" , function(event){ // -- окна браузера( при наведении на этот блок)
blockForMouse.innerHTML = 'clientX - ${event.clientX} <br> clientY - ${event.clientY'};
});
Такое можно использовать для эффекта паралакса, к примеру. При вождении по страницу мыши, картинка(фон) будет сдвигаться в ту или иную сторону

Подробнее о наведении мыши (mouseover/mouseout , mouseenter/leave
События mouseover/mouseout, relatedTarget
Событие mouseover происходит в момент, когда курсор оказывается над элементом, а событие mouseout - в момент, когда курсор уходит с элемента.
relatedTarget - элемент с которого курсор ушёл (при mouseover) или на который ушёл (при mouseover). Используется как console.log(event.relatedtarget);
mouseenter/leave работают аналогично, заисключением 2х правил: 1) Переходы внутри элемента на его потомки и с них - не считаются. 2) Эти события не всплывают.
Это снижает нагрузку на браузер.
Но тогда мы не можем использовать делегирование.


События клавиатуры.
Здесь их всего два
keydown - происходит при нажатии клавиши
keyup - происходит при отпускании клавиши
Для вывода какая клавиша нажата будут помогать детали объекта собитыя event - event.code и event.key.
Пример
document.addEventListener("keydown", function (event) {
	console.log('Нажата клавижа ${event.code} (${event.key})'); // code возвращает keyG (при нажатии на G/п (в зависимости от раскладки) всегда как keyG(независимо--
});  // --от регистра и раскладки), в то время как key возвращает именно ту клавишу, которую хотел пользователь (п или g или G или П в зависимости от регистра и раскладки)
document.addEventListener("keydown", function (event) {
	console.log('Отжата клавижа ${event.code} (${event.key})');
});
Понятно, что удобнее использовать key,если мы точно хотим знать, что нажато
Но code можно использовать при проверке комбинаций клавиш ( например ctrl+Z, что является отменой действия)
document.addEventListener('keydown', function(event) {
	if (event.code == 'KeyZ' && (event.ctrlKey || event.metaKey)) { // ctrl и meta(в продукции apple) как раз являются кнопками ctrl
		console.log('Отмена действия!)');
}
});

Автоповтор - нужен при зажатии клавиши
document.addEventListener("keydown", function(event) {
	console.log ('Нажата клавиша ${event.code} (${event.key})');
	console.log(event.repeat); // repeat вернет true, если клавиша зажата, false если просто была нажата
});

Событие при скролле
Возникает, когда мы прокручиваем некий объект или окно браузера
window.addElementListener('scroll', function(event){
	console.log('${scrollY}px'); // выведет сколько пикселей было прокручено от верха окна по вертикали(для горизонтали испольюется scrollX). 
});			             // Ранее использовались pageYOffset/pageXOffset которые уже устарели.
Как используется:
https://www.youtube.com/watch?v=kupwmF72Plo&list=PLM6XATa8CAG6IJvQBkrTTNZmpIcyS2Avk&index=21 - анимация при скролле
https://www.youtube.com/watch?v=uyBCzC7TIZg&list=PLM6XATa8CAG6IJvQBkrTTNZmpIcyS2Avk&index=31 - паралакс эффект мыши и скролла

События загрузки страницы
1)DOMContentLoaded(срабатывает на document) браузер полностью загрузил HTML,было простоено DOM дерево, но внешние ресурсы(картинки и стили) могут быть еще не загружены
2)load - браузер загрузил HTML и внешние ресурсы (срабатывает на window)
3)beforeunload/ unload - пользователь покидает страницу (срабатывает на window)

document.readyState - состояние загрузки
Значение:
1)"loadnig" - документ загружается.
2)"interactive" - документ был полностью прочитан
3)"complete" - документ был полностью прочитан и все ресурсы тоже загружены