Массив - отдельный вид объекта(позволяет хранить данные, но позволяет более гибкое 
управление).

Создание массива:
let arr = new Array(); // используется редко
let arr = [];

Заполнение массива так же как у объекта.

Существуют многомерные массивы - массивы, где элемент массива является отдельным
массивом со своими элементами
Пример:
let arr = [
[1,2,3],
[4,5,6],
[7,8,9]
];

Получаются значения по позициям:
console.log(имя массива[номер позиции]);

Если один из элементов массива является объектом, то можно получить доступ к любому
его свойству:
console.log(имямассива[номерпозиции].ключобъекта);

Если в массике элементом является функция, то вызвать её можно так:
Имямассива[позицияфункции]();

для получения конкретного значения из многомерного массива используют следующее:
console.log(имямассива[номер строки][позиция элемента]);

У массива есть свойство length(длина массива) - показывает какое количество элеметов
в массиве:
console.log(имямассива.length);

Методы добавления и удаления элементов в массив( не считай простого добавления по
элементу массива):
1. имямассива.push('Пример'); // добавит элемент 'Пример' в конце массива
Можно указать несколько значений
2.имямассива.shift(); // удаляет элемент в начале, сдвигая элементы массива влево.
3.имямассива.pop(); // удаляет последний элемент массива
4.имямассива.unshift('Пример'); // добавляет элемент 'Пример' в начало массива,сдвигая все
	остальные вправо.

Push и pop выполняются быстрее из-за того, что не сдвигают остальные элементы массива.

Работа с элементами массива через splice.
1.Удаление
имямассива.splice(1,2); // удаляем начиная с позиции [1] ровно два(2) элемента.

Если мы хотим удалить и сохранить элемент в переменную, то его в эту переменную надо
положить:
let arr=['Вася','Петя','Лена'];
let removed = arr.splice(1,1);
console.log(removed); // Выведет "Петя"

2.Замена с помощью splice:
arr.splice(0,1,'Женя'); // заменит [0] - ой элемент одним(1) элементом 'Женя'
console.log(arr); // массив будет таким: Женя,Петя,Лена.

3.Добавление с помощью splice:
имямассива.splice(1,0,'Пример1','Пример2') // начиная с [1]-ой позиции удалит ноль(0)
	элементов и добавит(впихнет между [1] и [2]) "Пример1" и "Пример2".

4.Удаление элементов с последней позиции
имямассива.splice(-1,1) // -1 - это и есть последняя позиция

Чтобы создать копию массива (а не просто новую ссылку на этот массив) можно
использовать slice:
let arr =['John','Ivan','Alex'];
let Twoarr = arr.slice(1,2); // создаст новый массив скопировав элементы начиная с [1]-ой
	позиции до [2]- ой позиции(не включая её).
console.log(Twoarr); // Ivan.

Так же можно копировать с конца массива: 
let Twoarr = arr.slice(-2,-1); // со второго(с конца) элемента до первого(с конца)элемента.

Если хотим скопировать весь массив, то: let имямассива2=имямассива.slice();

Можно скопировать массив с помощью concat(но он добавляет еще один элемент в конец):
let имямассива2=имямассива.concat('Vargo'); // скопирует в массив2 массив и добавит в конец Vargo.


Поиск в массиве:
1. имямассива.indexof(item,from) // ищет item, начиная с позиции from и возвращает индекс.Если не
найдет - результатом будет -1. 
такая же тема с lastIndexOf, но поиск справа налево.
2.имямассива.includes(item,from) - ищет так же, но возвращает true/false.
from - необязательный параметр.

Методы find,findInde и filter.
Нужны эти методы для того, чтобы найти в массиве элемент,который является объектом,по условию.
Синтаксис:
let переменная=имямассива.find(function(item,index,array){
return item.искомыйэлемент === 'Пример'.
Легче записать с помощью стрелочной функции:
let переменная=имямассива.find(item =>item.искомыйэлемент ==='Пример');
Легче на примере:
let arr =[
{name: 'Vasya', age:36},
{name: 'Nadya', age:18},
{name: 'Vargo', age:'неизвестно'},
]
let result= arr.find(item=>item.age ===18);
console.log(result); // выведет name:'Nasya' , age:18

У findIndex такой же синтаксис но результатом будет не объект, а индекс этого объекта.

Есть так же метод filter. Синтаксис такой же. Отличие в том, что он возвращает все удовлетворимые 
результаты, а не заканчивает свою работу на первом же элементе,котовый удовлетворил условие.

Методы сортировки массива:
1.console.log(имямассива.sort()); // сортирует слова и числа по алф.порядку и возрастанию 
соответственно.( но с числами чутка сложнее, может делать это неверно, т.к. сортирует числа, как
строки).
Для правильной сортировки нужно добавить в метод sort() функцию, получится sort(fn).
Для сортировки чисел функция такая:
function compareNum(a,b){
console.log(`Сравниваем ${a} и ${b}`);
return a-b
}
console.log(имямассива.sort(compareNim)); // отработает верно.
Проще использовать стрел.функцию : console.log(имямассива.sort((a,b)=>a-b));

2. Метод reverse - меняет порядок элементов на обратный:
console.log(имямассива.reverse());

Методы преобразования массивов.
1. map - вызывает функцию для каждого элемента массива и возвращает массив результатов выполения этой
функции. (Синтаксис с помощью стр.функции):
let переменная = имямассива.map(item =>item[0]); // вернет первый [0] символ каждого элемента массива.
Полная запись let result = arr.map(fuction (item, index, array) {
return item[0];
});

2. split - преобразовывает строку в массив по заданному разделителю.
let str = 'Ваня,Коля,Оля'
let arr= str.split(',');
console.log(arr); // выведет массив 'Ваня', 'Коля' , 'Оля'
Можно ограничить кол-во объектов которые попадут в массив
let arr= str.split(',', 2); // в таком случае массив будет таким: 'Ваня','Коля'.

3. join - работает наоборот, синтаксис такой же.

Массив - тот же объект
Чтобы узнать, что перед нами массив( как будто недостаточно квадратных скобок), можно использовать
функцию Array.isArray(имямассива). Использовать её можно через условие if и вывод в консоль сообщения.

Перебор массива.
1.Перебор через цикл for...of:
Задан массив arr.
for (let arrItem of arr) { // arrItem - переменная из головы
console.log(arrItem);} 

2.ForEach
Задан массив arr.
arr.forEach((item,index,array) => {
console.log(`${item} находится на ${index} -ой позиции в списке(массиве) ${array}`);
});

Варианты неправильного применения массива:
1. Добавление нечислового свойства, например arr.test = "Коля".
2.Создание "дыр", например arr[0], а затем arr[1000] (между ними ничего нет)
3. Заполнение массива в обратном порядке, например arr[1000],arr[999] и т.д